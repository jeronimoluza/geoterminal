permissions:
  contents: write

name: Version Check and Release

on:
  push:
    branches:
      - main

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
      new_version: ${{ steps.version_check.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml

      - name: Check version changes
        id: version_check
        run: |
          # Get the current version from pyproject.toml
          CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")

          # Get the version from the previous commit on main
          git checkout HEAD^
          PREVIOUS_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          git checkout -

          # Compare versions
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No version change detected"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          NEW_VERSION=${{ steps.version_check.outputs.new_version }}
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${NEW_VERSION}" -m "Release version ${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"

      - name: Create Release
        if: steps.version_check.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.version_check.outputs.new_version }}
          tag_name: v${{ steps.version_check.outputs.new_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
