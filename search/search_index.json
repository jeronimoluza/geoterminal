{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"geoterminal Documentation \u00b6 geoterminal is a powerful Python library for geospatial data processing and H3 operations. It provides a simple and efficient interface for working with various geospatial file formats and performing common geometric operations. Key Features \u00b6 File Format Support : GeoJSON, Shapefile, CSV, ORC, and WKT Geometry Operations : Buffer, intersect, simplify, centroids, and more! Data Operations : Query filtering using pandas syntax H3 Integration : Hexagonal hierarchical geospatial indexing Command Line Interface : Easy-to-use CLI with operation chaining Inspection Tools : Head, tail, shape, data types, and CRS information Quick Start \u00b6 # Install geoterminal pip install geoterminal # Process a file geoterminal input.shp output.geojson # Process a WKT string geoterminal \"POLYGON((30 10, 40 40, 20 40, 10 20, 30 10))\" output.geojson # Apply a buffer of 1000 meters and convert to H3 cells geoterminal input.shp output.geojson --buffer-size 1000 --h3-res 6 # Chain operations to find urban centers in a specific country geoterminal cities.shp centers.wkt \\ --query \"country == 'Country A'\" \\ --query \"population > 1000000\" \\ --centroid Documentation Sections \u00b6 Installation Usage Guide API Reference CLI Documentation Contributing Support \u00b6 If you need help or have questions: Open an issue on GitHub Join our community discussions License \u00b6 geoterminal is released under the MIT License. See the LICENSE file for details.","title":"Home"},{"location":"#geoterminal-documentation","text":"geoterminal is a powerful Python library for geospatial data processing and H3 operations. It provides a simple and efficient interface for working with various geospatial file formats and performing common geometric operations.","title":"geoterminal Documentation"},{"location":"#key-features","text":"File Format Support : GeoJSON, Shapefile, CSV, ORC, and WKT Geometry Operations : Buffer, intersect, simplify, centroids, and more! Data Operations : Query filtering using pandas syntax H3 Integration : Hexagonal hierarchical geospatial indexing Command Line Interface : Easy-to-use CLI with operation chaining Inspection Tools : Head, tail, shape, data types, and CRS information","title":"Key Features"},{"location":"#quick-start","text":"# Install geoterminal pip install geoterminal # Process a file geoterminal input.shp output.geojson # Process a WKT string geoterminal \"POLYGON((30 10, 40 40, 20 40, 10 20, 30 10))\" output.geojson # Apply a buffer of 1000 meters and convert to H3 cells geoterminal input.shp output.geojson --buffer-size 1000 --h3-res 6 # Chain operations to find urban centers in a specific country geoterminal cities.shp centers.wkt \\ --query \"country == 'Country A'\" \\ --query \"population > 1000000\" \\ --centroid","title":"Quick Start"},{"location":"#documentation-sections","text":"Installation Usage Guide API Reference CLI Documentation Contributing","title":"Documentation Sections"},{"location":"#support","text":"If you need help or have questions: Open an issue on GitHub Join our community discussions","title":"Support"},{"location":"#license","text":"geoterminal is released under the MIT License. See the LICENSE file for details.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.1.4] - 2025-04-15 \u00b6 Changed \u00b6 Docs README.md ISSUE_TEMPLATEs Fixed \u00b6 Deploy MkDocs to Github Pages working great [0.1.3] - 2025-04-11 \u00b6 Added \u00b6 New geometry operations: --unary-union to merge all geometries into one --convex-hull to create convex hull --centroid to calculate centroid --envelope to get bounding box --intersects to filter geometries by intersection --simplify to reduce geometry complexity with given tolerance Data operations: --query to filter data using pandas query syntax Enhanced inspect mode: --shape to show number of rows and columns --dtypes to show column data types WKT output format (.wkt) supporting both single geometry and GEOMETRYCOLLECTION Changed \u00b6 H3 operations now always include hexagon geometries Removed --h3-geom flag as it's no longer needed Improved documentation with operation chaining examples Reorganized CLI options into clearer categories Fixed \u00b6 Fixed duplicate test names in test_io.py Added missing fixtures for WKT export tests [0.1.2] - 2025-04-10 \u00b6 Added \u00b6 New inspect mode when only INPUT is provided --head N to show first N rows in WKT format --tail N to show last N rows in WKT format --crs to show CRS information Operation order preservation: operations are now applied in the exact order they appear in command line Logging system improvements: Switched to loguru for better logging control Added --log-level flag with DEBUG, INFO, WARNING, ERROR options Simplified INFO output format Detailed DEBUG output with timestamps and file info Changed \u00b6 Restructured project: Renamed file_io folder to io Created operators folder for geometry and H3 operations Version now reads directly from pyproject.toml Improved geometry display in head/tail output Fixed \u00b6 Fixed warning about geometry column modification in head/tail commands Reduced log verbosity for file operations [0.1.1] - 2025-04-10 \u00b6 Note \u00b6 Version bump only. No functional changes from 0.1.0. [0.1.0] - 2025-04-07 \u00b6 Added \u00b6 Class-based structure for geometry operations Class-based structure for H3 operations Improved file I/O with multiple format support Comprehensive documentation Type hints throughout the codebase Custom exceptions for better error handling CLI improvements with better argument handling Direct WKT string input support Automated testing with pytest CI/CD pipeline Pre-commit hooks for code quality Initial release Basic geometry operations Basic H3 operations File I/O support Command-line interface Basic documentation Changed \u00b6 Switched from setup.py to Poetry with pyproject.toml for dependency and packaging management Simplified CLI interface - no need to specify 'process' command for basic operations Made process command the default operation Refactored geometry operations into GeometryProcessor class Refactored H3 operations into H3Processor class Improved error messages and logging Updated CLI interface for better usability Consolidated file handling utilities Fixed \u00b6 Improved error handling in file operations Better CRS handling and validation Fixed geometry validation issues Improved H3 resolution validation","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#014-2025-04-15","text":"","title":"[0.1.4] - 2025-04-15"},{"location":"changelog/#changed","text":"Docs README.md ISSUE_TEMPLATEs","title":"Changed"},{"location":"changelog/#fixed","text":"Deploy MkDocs to Github Pages working great","title":"Fixed"},{"location":"changelog/#013-2025-04-11","text":"","title":"[0.1.3] - 2025-04-11"},{"location":"changelog/#added","text":"New geometry operations: --unary-union to merge all geometries into one --convex-hull to create convex hull --centroid to calculate centroid --envelope to get bounding box --intersects to filter geometries by intersection --simplify to reduce geometry complexity with given tolerance Data operations: --query to filter data using pandas query syntax Enhanced inspect mode: --shape to show number of rows and columns --dtypes to show column data types WKT output format (.wkt) supporting both single geometry and GEOMETRYCOLLECTION","title":"Added"},{"location":"changelog/#changed_1","text":"H3 operations now always include hexagon geometries Removed --h3-geom flag as it's no longer needed Improved documentation with operation chaining examples Reorganized CLI options into clearer categories","title":"Changed"},{"location":"changelog/#fixed_1","text":"Fixed duplicate test names in test_io.py Added missing fixtures for WKT export tests","title":"Fixed"},{"location":"changelog/#012-2025-04-10","text":"","title":"[0.1.2] - 2025-04-10"},{"location":"changelog/#added_1","text":"New inspect mode when only INPUT is provided --head N to show first N rows in WKT format --tail N to show last N rows in WKT format --crs to show CRS information Operation order preservation: operations are now applied in the exact order they appear in command line Logging system improvements: Switched to loguru for better logging control Added --log-level flag with DEBUG, INFO, WARNING, ERROR options Simplified INFO output format Detailed DEBUG output with timestamps and file info","title":"Added"},{"location":"changelog/#changed_2","text":"Restructured project: Renamed file_io folder to io Created operators folder for geometry and H3 operations Version now reads directly from pyproject.toml Improved geometry display in head/tail output","title":"Changed"},{"location":"changelog/#fixed_2","text":"Fixed warning about geometry column modification in head/tail commands Reduced log verbosity for file operations","title":"Fixed"},{"location":"changelog/#011-2025-04-10","text":"","title":"[0.1.1] - 2025-04-10"},{"location":"changelog/#note","text":"Version bump only. No functional changes from 0.1.0.","title":"Note"},{"location":"changelog/#010-2025-04-07","text":"","title":"[0.1.0] - 2025-04-07"},{"location":"changelog/#added_2","text":"Class-based structure for geometry operations Class-based structure for H3 operations Improved file I/O with multiple format support Comprehensive documentation Type hints throughout the codebase Custom exceptions for better error handling CLI improvements with better argument handling Direct WKT string input support Automated testing with pytest CI/CD pipeline Pre-commit hooks for code quality Initial release Basic geometry operations Basic H3 operations File I/O support Command-line interface Basic documentation","title":"Added"},{"location":"changelog/#changed_3","text":"Switched from setup.py to Poetry with pyproject.toml for dependency and packaging management Simplified CLI interface - no need to specify 'process' command for basic operations Made process command the default operation Refactored geometry operations into GeometryProcessor class Refactored H3 operations into H3Processor class Improved error messages and logging Updated CLI interface for better usability Consolidated file handling utilities","title":"Changed"},{"location":"changelog/#fixed_3","text":"Improved error handling in file operations Better CRS handling and validation Fixed geometry validation issues Improved H3 resolution validation","title":"Fixed"},{"location":"cli/","text":"Command Line Interface \u00b6 Overview \u00b6 geoterminal's CLI provides two main modes of operation: Inspect Mode : When only INPUT is provided Transform Mode : When both INPUT and OUTPUT are provided Command Structure \u00b6 geoterminal INPUT OUTPUT [ OPTIONS ] Arguments \u00b6 INPUT : Input geometry (file path or WKT string) OUTPUT : Output file path (optional; format determined by extension) Options \u00b6 Inspection Options \u00b6 --head N : Show first N rows --tail N : Show last N rows --shape : Show number of rows and columns --dtypes : Show column data types --crs : Show coordinate reference system Geometry Operations \u00b6 --buffer-size SIZE : Buffer size in CRS units --unary-union : Merge all geometries --convex-hull : Create convex hull --centroid : Calculate centroid --envelope : Get bounding box --simplify TOL : Simplify geometries with tolerance level Filtering Operations \u00b6 --query EXPR : Filter using pandas query syntax --intersects GEOM : Filter by intersection --mask GEOM : Clip using mask geometry Coordinate Operations \u00b6 --input-crs EPSG : Input CRS (default: 4326) --output-crs EPSG : Output CRS --mask-crs EPSG : Mask CRS (default: 4326) H3 Operations \u00b6 --h3-res RES : H3 resolution (0-15) File Options \u00b6 --geometry-column COL : WKT column name for CSV/ORC General Options \u00b6 --version : Show version information --log-level {DEBUG,INFO,WARNING,ERROR} : Set logging level (default: INFO) Error Handling \u00b6 The CLI will exit with non-zero status in case of errors: 1: Invalid arguments 2: File operation error 3: Geometry operation error 4: H3 operation error Error messages are printed to stderr with details about the failure.","title":"CLI Reference"},{"location":"cli/#command-line-interface","text":"","title":"Command Line Interface"},{"location":"cli/#overview","text":"geoterminal's CLI provides two main modes of operation: Inspect Mode : When only INPUT is provided Transform Mode : When both INPUT and OUTPUT are provided","title":"Overview"},{"location":"cli/#command-structure","text":"geoterminal INPUT OUTPUT [ OPTIONS ]","title":"Command Structure"},{"location":"cli/#arguments","text":"INPUT : Input geometry (file path or WKT string) OUTPUT : Output file path (optional; format determined by extension)","title":"Arguments"},{"location":"cli/#options","text":"","title":"Options"},{"location":"cli/#inspection-options","text":"--head N : Show first N rows --tail N : Show last N rows --shape : Show number of rows and columns --dtypes : Show column data types --crs : Show coordinate reference system","title":"Inspection Options"},{"location":"cli/#geometry-operations","text":"--buffer-size SIZE : Buffer size in CRS units --unary-union : Merge all geometries --convex-hull : Create convex hull --centroid : Calculate centroid --envelope : Get bounding box --simplify TOL : Simplify geometries with tolerance level","title":"Geometry Operations"},{"location":"cli/#filtering-operations","text":"--query EXPR : Filter using pandas query syntax --intersects GEOM : Filter by intersection --mask GEOM : Clip using mask geometry","title":"Filtering Operations"},{"location":"cli/#coordinate-operations","text":"--input-crs EPSG : Input CRS (default: 4326) --output-crs EPSG : Output CRS --mask-crs EPSG : Mask CRS (default: 4326)","title":"Coordinate Operations"},{"location":"cli/#h3-operations","text":"--h3-res RES : H3 resolution (0-15)","title":"H3 Operations"},{"location":"cli/#file-options","text":"--geometry-column COL : WKT column name for CSV/ORC","title":"File Options"},{"location":"cli/#general-options","text":"--version : Show version information --log-level {DEBUG,INFO,WARNING,ERROR} : Set logging level (default: INFO)","title":"General Options"},{"location":"cli/#error-handling","text":"The CLI will exit with non-zero status in case of errors: 1: Invalid arguments 2: File operation error 3: Geometry operation error 4: H3 operation error Error messages are printed to stderr with details about the failure.","title":"Error Handling"},{"location":"contributing/","text":"Contributing Guide \u00b6 Thank you for your interest in contributing to geoterminal! This document provides guidelines and instructions for contributing. Development Setup \u00b6 Fork and clone the repository: git clone https://github.com/yourusername/geoterminal.git cd geoterminal Create a virtual environment: poetry install poetry shell Install development dependencies: pip install -e . Install pre-commit hooks: pre-commit install Development Workflow \u00b6 Create a new branch: git checkout -b feature-name Make your changes and write tests Run tests: pytest Run pre-commit checks: pre-commit run --all-files Commit your changes: git add . git commit -m \"Description of changes\" Push to your fork and create a pull request Code Style \u00b6 We use: Black for code formatting isort for import sorting flake8 for linting mypy for type checking Testing \u00b6 Write tests for new features Maintain or improve coverage Use pytest fixtures when appropriate Test both success and error cases Documentation \u00b6 Update docstrings (Google style) Update relevant documentation files Include doctest examples where helpful Update CHANGELOG.md Pull Request Process \u00b6 Update documentation Add tests for new features Update CHANGELOG.md Ensure CI checks pass Request review from maintainers Code of Conduct \u00b6 Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. Get Help \u00b6 If you need help, you can: Open an issue with your question Join our community discussions Reach out to maintainers Thank you for contributing to geoterminal!","title":"Contributing"},{"location":"contributing/#contributing-guide","text":"Thank you for your interest in contributing to geoterminal! This document provides guidelines and instructions for contributing.","title":"Contributing Guide"},{"location":"contributing/#development-setup","text":"Fork and clone the repository: git clone https://github.com/yourusername/geoterminal.git cd geoterminal Create a virtual environment: poetry install poetry shell Install development dependencies: pip install -e . Install pre-commit hooks: pre-commit install","title":"Development Setup"},{"location":"contributing/#development-workflow","text":"Create a new branch: git checkout -b feature-name Make your changes and write tests Run tests: pytest Run pre-commit checks: pre-commit run --all-files Commit your changes: git add . git commit -m \"Description of changes\" Push to your fork and create a pull request","title":"Development Workflow"},{"location":"contributing/#code-style","text":"We use: Black for code formatting isort for import sorting flake8 for linting mypy for type checking","title":"Code Style"},{"location":"contributing/#testing","text":"Write tests for new features Maintain or improve coverage Use pytest fixtures when appropriate Test both success and error cases","title":"Testing"},{"location":"contributing/#documentation","text":"Update docstrings (Google style) Update relevant documentation files Include doctest examples where helpful Update CHANGELOG.md","title":"Documentation"},{"location":"contributing/#pull-request-process","text":"Update documentation Add tests for new features Update CHANGELOG.md Ensure CI checks pass Request review from maintainers","title":"Pull Request Process"},{"location":"contributing/#code-of-conduct","text":"Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.","title":"Code of Conduct"},{"location":"contributing/#get-help","text":"If you need help, you can: Open an issue with your question Join our community discussions Reach out to maintainers Thank you for contributing to geoterminal!","title":"Get Help"},{"location":"installation/","text":"Installation Guide \u00b6 Requirements \u00b6 Python 3.10 or higher Poetry (Python package manager) Dependencies \u00b6 geoterminal requires the following main dependencies: geopandas shapely h3 pandas pyarrow loguru Installation Methods \u00b6 1. From PyPI (Recommended) \u00b6 pip install geoterminal 2. From Source (Development) \u00b6 Install Poetry if you haven't already: curl -sSL https://install.python-poetry.org | python3 - Clone the repository: git clone https://github.com/jeronimoluza/geoterminal.git cd geoterminal Install dependencies and create virtual environment: poetry install Activate the virtual environment: poetry shell Verifying Installation \u00b6 To verify that geoterminal is installed correctly: geoterminal --version Common Installation Issues \u00b6 Missing GDAL \u00b6 If you encounter GDAL-related errors: On Ubuntu/Debian: sudo apt-get install gdal-bin libgdal-dev On macOS: brew install gdal On Windows: Use OSGeo4W installer Or install via conda: conda install gdal Other Issues \u00b6 For other installation issues: Check your Python version: python --version Ensure pip is up to date: pip install --upgrade pip Check the GitHub issues for similar problems Open a new issue if the problem persists","title":"Installation"},{"location":"installation/#installation-guide","text":"","title":"Installation Guide"},{"location":"installation/#requirements","text":"Python 3.10 or higher Poetry (Python package manager)","title":"Requirements"},{"location":"installation/#dependencies","text":"geoterminal requires the following main dependencies: geopandas shapely h3 pandas pyarrow loguru","title":"Dependencies"},{"location":"installation/#installation-methods","text":"","title":"Installation Methods"},{"location":"installation/#1-from-pypi-recommended","text":"pip install geoterminal","title":"1. From PyPI (Recommended)"},{"location":"installation/#2-from-source-development","text":"Install Poetry if you haven't already: curl -sSL https://install.python-poetry.org | python3 - Clone the repository: git clone https://github.com/jeronimoluza/geoterminal.git cd geoterminal Install dependencies and create virtual environment: poetry install Activate the virtual environment: poetry shell","title":"2. From Source (Development)"},{"location":"installation/#verifying-installation","text":"To verify that geoterminal is installed correctly: geoterminal --version","title":"Verifying Installation"},{"location":"installation/#common-installation-issues","text":"","title":"Common Installation Issues"},{"location":"installation/#missing-gdal","text":"If you encounter GDAL-related errors: On Ubuntu/Debian: sudo apt-get install gdal-bin libgdal-dev On macOS: brew install gdal On Windows: Use OSGeo4W installer Or install via conda: conda install gdal","title":"Missing GDAL"},{"location":"installation/#other-issues","text":"For other installation issues: Check your Python version: python --version Ensure pip is up to date: pip install --upgrade pip Check the GitHub issues for similar problems Open a new issue if the problem persists","title":"Other Issues"},{"location":"usage/","text":"Usage Guide \u00b6 geoterminal provides both a command-line interface (CLI) and a Python API for geospatial operations. Command Line Interface \u00b6 Basic Usage \u00b6 geoterminal has two main modes: Inspect Mode (single input file): # View data structure geoterminal input.shp --shape # Show rows and columns geoterminal input.shp --dtypes # Show column types geoterminal input.shp --crs # Show CRS information # View data content geoterminal input.shp --head 10 # First 10 rows geoterminal input.shp --tail 5 # Last 5 rows Transform Mode (input and output files): # Process a file geoterminal input.shp output.geojson # Process a WKT string geoterminal \"POLYGON((30 10, 40 40, 20 40, 10 20, 30 10))\" output.geojson Supported Formats \u00b6 GeoJSON (.geojson) Shapefile (.shp) CSV/ORC with WKT column Direct WKT string input/output For CSV/ORC files, specify the geometry column (default is \"geometry\"): geoterminal input.csv output.geojson --geometry-column my_wkt_column Operations \u00b6 Basic Operations \u00b6 # Geometry Operations geoterminal input.shp output.geojson --buffer-size 1000 # Buffer geoterminal input.shp output.geojson --unary-union # Merge geometries geoterminal input.shp output.geojson --convex-hull # Create hull geoterminal input.shp output.geojson --centroid # Get centroid geoterminal input.shp output.geojson --simplify 0 .001 # Simplify # Filtering geoterminal input.shp output.geojson --query \"population > 1000000\" # By attribute geoterminal input.shp output.geojson --intersects other.shp # By intersection geoterminal input.shp output.geojson --intersects \"POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))\" # By intersection with WKT geoterminal input.shp output.geojson --mask mask.geojson # By mask geoterminal input.shp output.geojson --mask \"POLYGON((30 10, 40 40, 20 40, 10 20, 30 10))\" # By mask with WKT # Coordinate Systems geoterminal input.shp output.geojson --input-crs 4326 --output-crs 3857 # H3 Grid geoterminal input.shp output.geojson --h3-res 6 Operation Order \u00b6 Operations are applied in sequence. Compare: # Different results: geoterminal input.shp out.geojson --buffer-size 1000 --h3-res 7 # Buffer first geoterminal input.shp out.geojson --h3-res 7 --buffer-size 1000 # H3 first Advanced Examples \u00b6 # Generate metropolitan areas geoterminal cities.shp centers.geojson \\ --query \"population > 1000000\" \\ --centroid \\ --buffer-size 1000 # Generate areas of interest in H3 hexagons geoterminal density.shp h3_zones.geojson \\ --centroid \\ --buffer-size 5000 \\ --h3-res 8 Python API \u00b6 Geometry Processing \u00b6 from geoterminal.geometry_operations import GeometryProcessor import geopandas as gpd # Initialize gdf = gpd . read_file ( \"input.geojson\" ) processor = GeometryProcessor ( gdf ) # Operations buffered = processor . apply_buffer ( distance = 1000 ) union = processor . unary_union () hull = processor . convex_hull () filtered = processor . intersects ( other_gdf ) # Export buffered . to_file ( \"output.geojson\" ) H3 Grid Operations \u00b6 from geoterminal.h3_operations import H3Processor # Convert to H3 processor = H3Processor ( gdf ) h3_cells = processor . polyfill ( resolution = 9 ) h3_cells . to_file ( \"output.geojson\" ) File Operations \u00b6 from geoterminal.file_io import read_geometry_file , export_data # Read/Write gdf = read_geometry_file ( \"input.geojson\" ) export_data ( gdf , \"output.geojson\" ) For more examples, check our examples directory .","title":"Usage Guide"},{"location":"usage/#usage-guide","text":"geoterminal provides both a command-line interface (CLI) and a Python API for geospatial operations.","title":"Usage Guide"},{"location":"usage/#command-line-interface","text":"","title":"Command Line Interface"},{"location":"usage/#basic-usage","text":"geoterminal has two main modes: Inspect Mode (single input file): # View data structure geoterminal input.shp --shape # Show rows and columns geoterminal input.shp --dtypes # Show column types geoterminal input.shp --crs # Show CRS information # View data content geoterminal input.shp --head 10 # First 10 rows geoterminal input.shp --tail 5 # Last 5 rows Transform Mode (input and output files): # Process a file geoterminal input.shp output.geojson # Process a WKT string geoterminal \"POLYGON((30 10, 40 40, 20 40, 10 20, 30 10))\" output.geojson","title":"Basic Usage"},{"location":"usage/#supported-formats","text":"GeoJSON (.geojson) Shapefile (.shp) CSV/ORC with WKT column Direct WKT string input/output For CSV/ORC files, specify the geometry column (default is \"geometry\"): geoterminal input.csv output.geojson --geometry-column my_wkt_column","title":"Supported Formats"},{"location":"usage/#operations","text":"","title":"Operations"},{"location":"usage/#basic-operations","text":"# Geometry Operations geoterminal input.shp output.geojson --buffer-size 1000 # Buffer geoterminal input.shp output.geojson --unary-union # Merge geometries geoterminal input.shp output.geojson --convex-hull # Create hull geoterminal input.shp output.geojson --centroid # Get centroid geoterminal input.shp output.geojson --simplify 0 .001 # Simplify # Filtering geoterminal input.shp output.geojson --query \"population > 1000000\" # By attribute geoterminal input.shp output.geojson --intersects other.shp # By intersection geoterminal input.shp output.geojson --intersects \"POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))\" # By intersection with WKT geoterminal input.shp output.geojson --mask mask.geojson # By mask geoterminal input.shp output.geojson --mask \"POLYGON((30 10, 40 40, 20 40, 10 20, 30 10))\" # By mask with WKT # Coordinate Systems geoterminal input.shp output.geojson --input-crs 4326 --output-crs 3857 # H3 Grid geoterminal input.shp output.geojson --h3-res 6","title":"Basic Operations"},{"location":"usage/#operation-order","text":"Operations are applied in sequence. Compare: # Different results: geoterminal input.shp out.geojson --buffer-size 1000 --h3-res 7 # Buffer first geoterminal input.shp out.geojson --h3-res 7 --buffer-size 1000 # H3 first","title":"Operation Order"},{"location":"usage/#advanced-examples","text":"# Generate metropolitan areas geoterminal cities.shp centers.geojson \\ --query \"population > 1000000\" \\ --centroid \\ --buffer-size 1000 # Generate areas of interest in H3 hexagons geoterminal density.shp h3_zones.geojson \\ --centroid \\ --buffer-size 5000 \\ --h3-res 8","title":"Advanced Examples"},{"location":"usage/#python-api","text":"","title":"Python API"},{"location":"usage/#geometry-processing","text":"from geoterminal.geometry_operations import GeometryProcessor import geopandas as gpd # Initialize gdf = gpd . read_file ( \"input.geojson\" ) processor = GeometryProcessor ( gdf ) # Operations buffered = processor . apply_buffer ( distance = 1000 ) union = processor . unary_union () hull = processor . convex_hull () filtered = processor . intersects ( other_gdf ) # Export buffered . to_file ( \"output.geojson\" )","title":"Geometry Processing"},{"location":"usage/#h3-grid-operations","text":"from geoterminal.h3_operations import H3Processor # Convert to H3 processor = H3Processor ( gdf ) h3_cells = processor . polyfill ( resolution = 9 ) h3_cells . to_file ( \"output.geojson\" )","title":"H3 Grid Operations"},{"location":"usage/#file-operations","text":"from geoterminal.file_io import read_geometry_file , export_data # Read/Write gdf = read_geometry_file ( \"input.geojson\" ) export_data ( gdf , \"output.geojson\" ) For more examples, check our examples directory .","title":"File Operations"},{"location":"api/file_io/","text":"File I/O API \u00b6 Module: geoterminal.io.file Functions \u00b6 read_geometry_file \u00b6 def read_geometry_file ( file_path : Union [ str , Path ], crs : Optional [ int ] = None , geometry_column : Optional [ str ] = None ) -> gpd . GeoDataFrame Reads geometry from file or WKT string. Parameters: file_path : Path to file or WKT string crs : CRS for WKT input (required for WKT) geometry_column : Column name containing WKT geometry strings (for CSV/ORC files) Returns: GeoDataFrame containing the geometries Raises: FileHandlerError : If file reading fails Supported Formats: GeoJSON (.geojson) Shapefile (.shp) CSV with WKT column ORC with WKT column WKT string export_data \u00b6 def export_data ( data : Union [ gpd . GeoDataFrame , pd . DataFrame ], output_path : Union [ str , Path ] ) -> None Exports data to file. Parameters: data : Data to export (GeoDataFrame or DataFrame) output_path : Output file path Raises: FileHandlerError : If export fails Supported Formats: GeoJSON (.geojson) Shapefile (.shp) CSV (.csv) with WKT geometry ORC (.orc) with WKT geometry WKT (.wkt) - Single geometry or GEOMETRYCOLLECTION Exceptions \u00b6 FileHandlerError \u00b6 class FileHandlerError ( Exception ) Raised when file operations fail. Includes detailed error message. Examples \u00b6 Reading Files \u00b6 from geoterminal.file_io import read_geometry_file # Read GeoJSON gdf = read_geometry_file ( \"input.geojson\" ) # Read WKT with CRS wkt = \"POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))\" gdf = read_geometry_file ( wkt , crs = \"EPSG:4326\" ) # Read CSV/ORC with custom geometry column gdf = read_geometry_file ( \"input.csv\" , geometry_column = \"my_wkt_column\" ) gdf = read_geometry_file ( \"input.orc\" , geometry_column = \"my_wkt_column\" ) Exporting Files \u00b6 from geoterminal.file_io import export_data # Export to GeoJSON export_data ( gdf , \"output.geojson\" ) # Export to CSV with WKT geometry export_data ( gdf , \"output.csv\" ) # Export to WKT export_data ( gdf , \"output.wkt\" ) # Single geometry or GEOMETRYCOLLECTION","title":"File I/O"},{"location":"api/file_io/#file-io-api","text":"Module: geoterminal.io.file","title":"File I/O API"},{"location":"api/file_io/#functions","text":"","title":"Functions"},{"location":"api/file_io/#read_geometry_file","text":"def read_geometry_file ( file_path : Union [ str , Path ], crs : Optional [ int ] = None , geometry_column : Optional [ str ] = None ) -> gpd . GeoDataFrame Reads geometry from file or WKT string. Parameters: file_path : Path to file or WKT string crs : CRS for WKT input (required for WKT) geometry_column : Column name containing WKT geometry strings (for CSV/ORC files) Returns: GeoDataFrame containing the geometries Raises: FileHandlerError : If file reading fails Supported Formats: GeoJSON (.geojson) Shapefile (.shp) CSV with WKT column ORC with WKT column WKT string","title":"read_geometry_file"},{"location":"api/file_io/#export_data","text":"def export_data ( data : Union [ gpd . GeoDataFrame , pd . DataFrame ], output_path : Union [ str , Path ] ) -> None Exports data to file. Parameters: data : Data to export (GeoDataFrame or DataFrame) output_path : Output file path Raises: FileHandlerError : If export fails Supported Formats: GeoJSON (.geojson) Shapefile (.shp) CSV (.csv) with WKT geometry ORC (.orc) with WKT geometry WKT (.wkt) - Single geometry or GEOMETRYCOLLECTION","title":"export_data"},{"location":"api/file_io/#exceptions","text":"","title":"Exceptions"},{"location":"api/file_io/#filehandlererror","text":"class FileHandlerError ( Exception ) Raised when file operations fail. Includes detailed error message.","title":"FileHandlerError"},{"location":"api/file_io/#examples","text":"","title":"Examples"},{"location":"api/file_io/#reading-files","text":"from geoterminal.file_io import read_geometry_file # Read GeoJSON gdf = read_geometry_file ( \"input.geojson\" ) # Read WKT with CRS wkt = \"POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))\" gdf = read_geometry_file ( wkt , crs = \"EPSG:4326\" ) # Read CSV/ORC with custom geometry column gdf = read_geometry_file ( \"input.csv\" , geometry_column = \"my_wkt_column\" ) gdf = read_geometry_file ( \"input.orc\" , geometry_column = \"my_wkt_column\" )","title":"Reading Files"},{"location":"api/file_io/#exporting-files","text":"from geoterminal.file_io import export_data # Export to GeoJSON export_data ( gdf , \"output.geojson\" ) # Export to CSV with WKT geometry export_data ( gdf , \"output.csv\" ) # Export to WKT export_data ( gdf , \"output.wkt\" ) # Single geometry or GEOMETRYCOLLECTION","title":"Exporting Files"},{"location":"api/geometry_operations/","text":"Geometry Operations API \u00b6 Module: geoterminal.operators.geometry_operations Classes \u00b6 GeometryProcessor \u00b6 Handles geometry operations on GeoDataFrames. class GeometryProcessor : def __init__ ( self , gdf : Optional [ gpd . GeoDataFrame ] = None ) def apply_buffer ( self , size : float ) -> None def clip ( self , mask_gdf : gpd . GeoDataFrame ) -> None def reproject ( self , target_crs : int ) -> None def unary_union ( self ) -> None def convex_hull ( self ) -> None def centroid ( self ) -> None def envelope ( self ) -> None def intersects ( self , other : Union [ str , gpd . GeoDataFrame ]) -> None def simplify ( self , tolerance : float ) -> None Methods \u00b6 Basic Operations: apply_buffer : Apply a buffer of specified size in meters clip : Clip geometries using a mask GeoDataFrame reproject : Reproject geometries to target CRS Advanced Operations: unary_union : Merge all geometries into one convex_hull : Create convex hull of geometries centroid : Calculate centroid of geometries envelope : Get bounding box of geometries intersects : Filter geometries that intersect with another geometry simplify : Simplify geometries using Douglas-Peucker algorithm Exceptions \u00b6 GeometryOperationError \u00b6 Raised when geometry operations fail. GeometryProcessor \u00b6 The GeometryProcessor class is the main interface for geometric operations. Constructor \u00b6 GeometryProcessor ( gdf : Optional [ gpd . GeoDataFrame ] = None ) Parameters: gdf : Optional GeoDataFrame to process. If None, can be set later. Methods \u00b6 apply_buffer \u00b6 def apply_buffer ( self , distance : float ) -> gpd . GeoDataFrame Creates a buffer around geometries. Parameters: distance : Buffer distance in the units of the GeoDataFrame's CRS Returns: GeoDataFrame with buffered geometries Raises: GeometryOperationError : If buffer operation fails unary_union \u00b6 def unary_union ( self ) -> gpd . GeoDataFrame Merges all geometries into a single geometry. Returns: GeoDataFrame with a single merged geometry Raises: GeometryOperationError : If union operation fails convex_hull \u00b6 def convex_hull ( self ) -> gpd . GeoDataFrame Creates a convex hull containing all geometries. Returns: GeoDataFrame with convex hull geometry Raises: GeometryOperationError : If convex hull operation fails centroid \u00b6 def centroid ( self ) -> gpd . GeoDataFrame Calculates the centroid of each geometry. Returns: GeoDataFrame with centroid points Raises: GeometryOperationError : If centroid calculation fails envelope \u00b6 def envelope ( self ) -> gpd . GeoDataFrame Creates a bounding box (envelope) for each geometry. Returns: GeoDataFrame with envelope polygons Raises: GeometryOperationError : If envelope operation fails intersects \u00b6 def intersects ( self , other : Union [ str , gpd . GeoDataFrame ]) -> gpd . GeoDataFrame Filters geometries that intersect with another geometry. Parameters: other : WKT string or GeoDataFrame to test intersection against Returns: GeoDataFrame with geometries that intersect with the input Raises: GeometryOperationError : If intersection operation fails simplify \u00b6 def simplify ( self , tolerance : float ) -> gpd . GeoDataFrame Simplify geometries using Douglas-Peucker algorithm. Parameters: tolerance : Maximum allowed deviation from original geometry. Should be in the same units as the geometry's coordinates. Returns: GeoDataFrame with simplified geometries Raises: GeometryOperationError : If simplification fails clip \u00b6 def clip ( self , mask : Union [ gpd . GeoDataFrame , Polygon ]) -> gpd . GeoDataFrame Clips geometries using a mask. Parameters: mask : GeoDataFrame or Polygon to use as clip mask Returns: GeoDataFrame with clipped geometries Raises: GeometryOperationError : If clip operation fails reproject \u00b6 def reproject ( self , target_crs : Union [ str , int ]) -> gpd . GeoDataFrame Reprojects the GeoDataFrame to a new CRS. Parameters: target_crs : Target CRS as EPSG code or string Returns: Reprojected GeoDataFrame Raises: GeometryOperationError : If reprojection fails Properties \u00b6 gdf \u00b6 @property def gdf ( self ) -> Optional [ gpd . GeoDataFrame ] The current GeoDataFrame being processed. crs \u00b6 @property def crs ( self ) -> Optional [ str ] The CRS of the current GeoDataFrame. Exceptions \u00b6 GeometryOperationError \u00b6 class GeometryOperationError ( Exception ) Raised when a geometry operation fails. Includes detailed error message.","title":"Geometry Operations"},{"location":"api/geometry_operations/#geometry-operations-api","text":"Module: geoterminal.operators.geometry_operations","title":"Geometry Operations API"},{"location":"api/geometry_operations/#classes","text":"","title":"Classes"},{"location":"api/geometry_operations/#geometryprocessor","text":"Handles geometry operations on GeoDataFrames. class GeometryProcessor : def __init__ ( self , gdf : Optional [ gpd . GeoDataFrame ] = None ) def apply_buffer ( self , size : float ) -> None def clip ( self , mask_gdf : gpd . GeoDataFrame ) -> None def reproject ( self , target_crs : int ) -> None def unary_union ( self ) -> None def convex_hull ( self ) -> None def centroid ( self ) -> None def envelope ( self ) -> None def intersects ( self , other : Union [ str , gpd . GeoDataFrame ]) -> None def simplify ( self , tolerance : float ) -> None","title":"GeometryProcessor"},{"location":"api/geometry_operations/#methods","text":"Basic Operations: apply_buffer : Apply a buffer of specified size in meters clip : Clip geometries using a mask GeoDataFrame reproject : Reproject geometries to target CRS Advanced Operations: unary_union : Merge all geometries into one convex_hull : Create convex hull of geometries centroid : Calculate centroid of geometries envelope : Get bounding box of geometries intersects : Filter geometries that intersect with another geometry simplify : Simplify geometries using Douglas-Peucker algorithm","title":"Methods"},{"location":"api/geometry_operations/#exceptions","text":"","title":"Exceptions"},{"location":"api/geometry_operations/#geometryoperationerror","text":"Raised when geometry operations fail.","title":"GeometryOperationError"},{"location":"api/geometry_operations/#geometryprocessor_1","text":"The GeometryProcessor class is the main interface for geometric operations.","title":"GeometryProcessor"},{"location":"api/geometry_operations/#constructor","text":"GeometryProcessor ( gdf : Optional [ gpd . GeoDataFrame ] = None ) Parameters: gdf : Optional GeoDataFrame to process. If None, can be set later.","title":"Constructor"},{"location":"api/geometry_operations/#methods_1","text":"","title":"Methods"},{"location":"api/geometry_operations/#apply_buffer","text":"def apply_buffer ( self , distance : float ) -> gpd . GeoDataFrame Creates a buffer around geometries. Parameters: distance : Buffer distance in the units of the GeoDataFrame's CRS Returns: GeoDataFrame with buffered geometries Raises: GeometryOperationError : If buffer operation fails","title":"apply_buffer"},{"location":"api/geometry_operations/#unary_union","text":"def unary_union ( self ) -> gpd . GeoDataFrame Merges all geometries into a single geometry. Returns: GeoDataFrame with a single merged geometry Raises: GeometryOperationError : If union operation fails","title":"unary_union"},{"location":"api/geometry_operations/#convex_hull","text":"def convex_hull ( self ) -> gpd . GeoDataFrame Creates a convex hull containing all geometries. Returns: GeoDataFrame with convex hull geometry Raises: GeometryOperationError : If convex hull operation fails","title":"convex_hull"},{"location":"api/geometry_operations/#centroid","text":"def centroid ( self ) -> gpd . GeoDataFrame Calculates the centroid of each geometry. Returns: GeoDataFrame with centroid points Raises: GeometryOperationError : If centroid calculation fails","title":"centroid"},{"location":"api/geometry_operations/#envelope","text":"def envelope ( self ) -> gpd . GeoDataFrame Creates a bounding box (envelope) for each geometry. Returns: GeoDataFrame with envelope polygons Raises: GeometryOperationError : If envelope operation fails","title":"envelope"},{"location":"api/geometry_operations/#intersects","text":"def intersects ( self , other : Union [ str , gpd . GeoDataFrame ]) -> gpd . GeoDataFrame Filters geometries that intersect with another geometry. Parameters: other : WKT string or GeoDataFrame to test intersection against Returns: GeoDataFrame with geometries that intersect with the input Raises: GeometryOperationError : If intersection operation fails","title":"intersects"},{"location":"api/geometry_operations/#simplify","text":"def simplify ( self , tolerance : float ) -> gpd . GeoDataFrame Simplify geometries using Douglas-Peucker algorithm. Parameters: tolerance : Maximum allowed deviation from original geometry. Should be in the same units as the geometry's coordinates. Returns: GeoDataFrame with simplified geometries Raises: GeometryOperationError : If simplification fails","title":"simplify"},{"location":"api/geometry_operations/#clip","text":"def clip ( self , mask : Union [ gpd . GeoDataFrame , Polygon ]) -> gpd . GeoDataFrame Clips geometries using a mask. Parameters: mask : GeoDataFrame or Polygon to use as clip mask Returns: GeoDataFrame with clipped geometries Raises: GeometryOperationError : If clip operation fails","title":"clip"},{"location":"api/geometry_operations/#reproject","text":"def reproject ( self , target_crs : Union [ str , int ]) -> gpd . GeoDataFrame Reprojects the GeoDataFrame to a new CRS. Parameters: target_crs : Target CRS as EPSG code or string Returns: Reprojected GeoDataFrame Raises: GeometryOperationError : If reprojection fails","title":"reproject"},{"location":"api/geometry_operations/#properties","text":"","title":"Properties"},{"location":"api/geometry_operations/#gdf","text":"@property def gdf ( self ) -> Optional [ gpd . GeoDataFrame ] The current GeoDataFrame being processed.","title":"gdf"},{"location":"api/geometry_operations/#crs","text":"@property def crs ( self ) -> Optional [ str ] The CRS of the current GeoDataFrame.","title":"crs"},{"location":"api/geometry_operations/#exceptions_1","text":"","title":"Exceptions"},{"location":"api/geometry_operations/#geometryoperationerror_1","text":"class GeometryOperationError ( Exception ) Raised when a geometry operation fails. Includes detailed error message.","title":"GeometryOperationError"},{"location":"api/h3_operations/","text":"H3 Operations API \u00b6 Module: geoterminal.operators.h3_operations Functions \u00b6 polyfill \u00b6 def polyfill ( gdf : gpd . GeoDataFrame , resolution : int ) -> gpd . GeoDataFrame Convert geometries to H3 hexagons at specified resolution. Classes \u00b6 H3Processor \u00b6 Handles H3 grid operations on GeoDataFrames. class H3Processor : def __init__ ( self , gdf : Optional [ gpd . GeoDataFrame ] = None ) def polyfill ( self , resolution : int ) -> gpd . GeoDataFrame def get_hex_geometry ( self , h3_address : str ) -> Polygon Methods \u00b6 polyfill : Convert geometries to H3 hexagons get_hex_geometry : Get polygon geometry for H3 address Exceptions \u00b6 H3OperationError \u00b6 Raised when H3 operations fail. H3Processor \u00b6 The H3Processor class handles H3 grid operations. Constructor \u00b6 H3Processor ( gdf : Optional [ gpd . GeoDataFrame ] = None ) Parameters: gdf : Optional GeoDataFrame to process. If None, can be set later. Methods \u00b6 get_hex_geometry \u00b6 @staticmethod def get_hex_geometry ( hex_id : str ) -> Polygon Gets the geometry of an H3 hexagon. Parameters: hex_id : H3 index as string Returns: Shapely Polygon representing the H3 cell Raises: H3OperationError : If hex_id is invalid polyfill \u00b6 def polyfill ( self , resolution : int ) -> gpd . GeoDataFrame Fills polygons with H3 cells. Always includes hexagon geometries. Parameters: resolution : H3 resolution (0-15) Returns: GeoDataFrame with H3 cells including hexagon geometries Raises: H3OperationError : If polyfill operation fails Properties \u00b6 gdf \u00b6 @property def gdf ( self ) -> Optional [ gpd . GeoDataFrame ] The current GeoDataFrame being processed. Exceptions \u00b6 H3OperationError \u00b6 class H3OperationError ( Exception ) Raised when an H3 operation fails. Includes detailed error message.","title":"H3 Operations"},{"location":"api/h3_operations/#h3-operations-api","text":"Module: geoterminal.operators.h3_operations","title":"H3 Operations API"},{"location":"api/h3_operations/#functions","text":"","title":"Functions"},{"location":"api/h3_operations/#polyfill","text":"def polyfill ( gdf : gpd . GeoDataFrame , resolution : int ) -> gpd . GeoDataFrame Convert geometries to H3 hexagons at specified resolution.","title":"polyfill"},{"location":"api/h3_operations/#classes","text":"","title":"Classes"},{"location":"api/h3_operations/#h3processor","text":"Handles H3 grid operations on GeoDataFrames. class H3Processor : def __init__ ( self , gdf : Optional [ gpd . GeoDataFrame ] = None ) def polyfill ( self , resolution : int ) -> gpd . GeoDataFrame def get_hex_geometry ( self , h3_address : str ) -> Polygon","title":"H3Processor"},{"location":"api/h3_operations/#methods","text":"polyfill : Convert geometries to H3 hexagons get_hex_geometry : Get polygon geometry for H3 address","title":"Methods"},{"location":"api/h3_operations/#exceptions","text":"","title":"Exceptions"},{"location":"api/h3_operations/#h3operationerror","text":"Raised when H3 operations fail.","title":"H3OperationError"},{"location":"api/h3_operations/#h3processor_1","text":"The H3Processor class handles H3 grid operations.","title":"H3Processor"},{"location":"api/h3_operations/#constructor","text":"H3Processor ( gdf : Optional [ gpd . GeoDataFrame ] = None ) Parameters: gdf : Optional GeoDataFrame to process. If None, can be set later.","title":"Constructor"},{"location":"api/h3_operations/#methods_1","text":"","title":"Methods"},{"location":"api/h3_operations/#get_hex_geometry","text":"@staticmethod def get_hex_geometry ( hex_id : str ) -> Polygon Gets the geometry of an H3 hexagon. Parameters: hex_id : H3 index as string Returns: Shapely Polygon representing the H3 cell Raises: H3OperationError : If hex_id is invalid","title":"get_hex_geometry"},{"location":"api/h3_operations/#polyfill_1","text":"def polyfill ( self , resolution : int ) -> gpd . GeoDataFrame Fills polygons with H3 cells. Always includes hexagon geometries. Parameters: resolution : H3 resolution (0-15) Returns: GeoDataFrame with H3 cells including hexagon geometries Raises: H3OperationError : If polyfill operation fails","title":"polyfill"},{"location":"api/h3_operations/#properties","text":"","title":"Properties"},{"location":"api/h3_operations/#gdf","text":"@property def gdf ( self ) -> Optional [ gpd . GeoDataFrame ] The current GeoDataFrame being processed.","title":"gdf"},{"location":"api/h3_operations/#exceptions_1","text":"","title":"Exceptions"},{"location":"api/h3_operations/#h3operationerror_1","text":"class H3OperationError ( Exception ) Raised when an H3 operation fails. Includes detailed error message.","title":"H3OperationError"}]}